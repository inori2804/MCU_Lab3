
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b0c  08002b0c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002b0c  08002b0c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b0c  08002b0c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b0c  08002b0c  00012b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000074  08002b88  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002b88  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000993a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d24  00000000  00000000  000299d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017030  00000000  00000000  0002cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6a4  00000000  00000000  00043b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082337  00000000  00000000  000501b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d24eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d8  00000000  00000000  000d2540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ad4 	.word	0x08002ad4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002ad4 	.word	0x08002ad4

0800014c <subKeyProcess>:
int button2_flag = 0;
int button3_flag = 0;

int TimeOutForKeyPress[numberOfButton] = {100,100,100};

void subKeyProcess(int i) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//TODO
	if(i == 0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d103      	bne.n	8000162 <subKeyProcess+0x16>
		button1_flag = 1;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <subKeyProcess+0x3c>)
 800015c:	2201      	movs	r2, #1
 800015e:	601a      	str	r2, [r3, #0]
		button2_flag = 1;
	}
	else if(i == 2){
		button3_flag = 1;
	}
}
 8000160:	e00c      	b.n	800017c <subKeyProcess+0x30>
	else if (i == 1){
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d103      	bne.n	8000170 <subKeyProcess+0x24>
		button2_flag = 1;
 8000168:	4b08      	ldr	r3, [pc, #32]	; (800018c <subKeyProcess+0x40>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
}
 800016e:	e005      	b.n	800017c <subKeyProcess+0x30>
	else if(i == 2){
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2b02      	cmp	r3, #2
 8000174:	d102      	bne.n	800017c <subKeyProcess+0x30>
		button3_flag = 1;
 8000176:	4b06      	ldr	r3, [pc, #24]	; (8000190 <subKeyProcess+0x44>)
 8000178:	2201      	movs	r2, #1
 800017a:	601a      	str	r2, [r3, #0]
}
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000090 	.word	0x20000090
 800018c:	20000094 	.word	0x20000094
 8000190:	20000098 	.word	0x20000098

08000194 <getKeyInput>:


void getKeyInput() {
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < numberOfButton; i++) {
 800019a:	2300      	movs	r3, #0
 800019c:	71fb      	strb	r3, [r7, #7]
 800019e:	e094      	b.n	80002ca <getKeyInput+0x136>
//		Logic to prevent bounce is using 3 layers
		KeyReg2[i] = KeyReg1[i];
 80001a0:	79fa      	ldrb	r2, [r7, #7]
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	494d      	ldr	r1, [pc, #308]	; (80002dc <getKeyInput+0x148>)
 80001a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001aa:	494d      	ldr	r1, [pc, #308]	; (80002e0 <getKeyInput+0x14c>)
 80001ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001b0:	79fa      	ldrb	r2, [r7, #7]
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	494b      	ldr	r1, [pc, #300]	; (80002e4 <getKeyInput+0x150>)
 80001b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001ba:	4948      	ldr	r1, [pc, #288]	; (80002dc <getKeyInput+0x148>)
 80001bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		Read input pin
		if(i == 0){
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <getKeyInput+0x4c>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 80001c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ca:	4847      	ldr	r0, [pc, #284]	; (80002e8 <getKeyInput+0x154>)
 80001cc:	f001 fc42 	bl	8001a54 <HAL_GPIO_ReadPin>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	4611      	mov	r1, r2
 80001d8:	4a42      	ldr	r2, [pc, #264]	; (80002e4 <getKeyInput+0x150>)
 80001da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001de:	e01e      	b.n	800021e <getKeyInput+0x8a>
		}
		else if(i == 1){
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d10c      	bne.n	8000200 <getKeyInput+0x6c>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ea:	483f      	ldr	r0, [pc, #252]	; (80002e8 <getKeyInput+0x154>)
 80001ec:	f001 fc32 	bl	8001a54 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	461a      	mov	r2, r3
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a3a      	ldr	r2, [pc, #232]	; (80002e4 <getKeyInput+0x150>)
 80001fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fe:	e00e      	b.n	800021e <getKeyInput+0x8a>
		}
		else if (i == 2){
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	2b02      	cmp	r3, #2
 8000204:	d10b      	bne.n	800021e <getKeyInput+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800020a:	4837      	ldr	r0, [pc, #220]	; (80002e8 <getKeyInput+0x154>)
 800020c:	f001 fc22 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	461a      	mov	r2, r3
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4611      	mov	r1, r2
 8000218:	4a32      	ldr	r2, [pc, #200]	; (80002e4 <getKeyInput+0x150>)
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
//		Handle press and press one second
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a2e      	ldr	r2, [pc, #184]	; (80002dc <getKeyInput+0x148>)
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	492e      	ldr	r1, [pc, #184]	; (80002e4 <getKeyInput+0x150>)
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d148      	bne.n	80002c4 <getKeyInput+0x130>
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a29      	ldr	r2, [pc, #164]	; (80002dc <getKeyInput+0x148>)
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	4928      	ldr	r1, [pc, #160]	; (80002e0 <getKeyInput+0x14c>)
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d13e      	bne.n	80002c4 <getKeyInput+0x130>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4a25      	ldr	r2, [pc, #148]	; (80002e0 <getKeyInput+0x14c>)
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4926      	ldr	r1, [pc, #152]	; (80002ec <getKeyInput+0x158>)
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d017      	beq.n	800028a <getKeyInput+0xf6>
				KeyReg3[i] = KeyReg2[i];
 800025a:	79fa      	ldrb	r2, [r7, #7]
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	4920      	ldr	r1, [pc, #128]	; (80002e0 <getKeyInput+0x14c>)
 8000260:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000264:	4921      	ldr	r1, [pc, #132]	; (80002ec <getKeyInput+0x158>)
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	4a1f      	ldr	r2, [pc, #124]	; (80002ec <getKeyInput+0x158>)
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d126      	bne.n	80002c4 <getKeyInput+0x130>
					TimeOutForKeyPress[i] = 100;
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	4a1d      	ldr	r2, [pc, #116]	; (80002f0 <getKeyInput+0x15c>)
 800027a:	2164      	movs	r1, #100	; 0x64
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i); // is pressed
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff62 	bl	800014c <subKeyProcess>
 8000288:	e01c      	b.n	80002c4 <getKeyInput+0x130>
				}
			} else {
				TimeOutForKeyPress[i]--;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <getKeyInput+0x15c>)
 800028e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000292:	3a01      	subs	r2, #1
 8000294:	4916      	ldr	r1, [pc, #88]	; (80002f0 <getKeyInput+0x15c>)
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <getKeyInput+0x15c>)
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d10e      	bne.n	80002c4 <getKeyInput+0x130>
					if(KeyReg2[i] == PRESSED_STATE){
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <getKeyInput+0x14c>)
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d103      	bne.n	80002ba <getKeyInput+0x126>
						subKeyProcess(i); // is pressed one second
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff49 	bl	800014c <subKeyProcess>
					}
					TimeOutForKeyPress[i] = 100;
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <getKeyInput+0x15c>)
 80002be:	2164      	movs	r1, #100	; 0x64
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (unsigned char i = 0; i < numberOfButton; i++) {
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	71fb      	strb	r3, [r7, #7]
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	f67f af67 	bls.w	80001a0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000000c 	.word	0x2000000c
 80002e0:	20000018 	.word	0x20000018
 80002e4:	20000000 	.word	0x20000000
 80002e8:	40010800 	.word	0x40010800
 80002ec:	20000024 	.word	0x20000024
 80002f0:	20000030 	.word	0x20000030

080002f4 <is_button1_pressed>:

unsigned char is_button1_pressed() {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <is_button1_pressed+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d104      	bne.n	800030a <is_button1_pressed+0x16>
		button1_flag = 0;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <is_button1_pressed+0x20>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
		return 1;
 8000306:	2301      	movs	r3, #1
 8000308:	e000      	b.n	800030c <is_button1_pressed+0x18>
	} else
		return 0;
 800030a:	2300      	movs	r3, #0
}
 800030c:	4618      	mov	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000090 	.word	0x20000090

08000318 <is_button2_pressed>:

unsigned char is_button2_pressed() {
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <is_button2_pressed+0x20>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d104      	bne.n	800032e <is_button2_pressed+0x16>
		button2_flag = 0;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <is_button2_pressed+0x20>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
		return 1;
 800032a:	2301      	movs	r3, #1
 800032c:	e000      	b.n	8000330 <is_button2_pressed+0x18>
	} else
		return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	20000094 	.word	0x20000094

0800033c <is_button3_pressed>:

unsigned char is_button3_pressed() {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <is_button3_pressed+0x20>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d104      	bne.n	8000352 <is_button3_pressed+0x16>
		button3_flag = 0;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <is_button3_pressed+0x20>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		return 1;
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <is_button3_pressed+0x18>
	} else
		return 0;
 8000352:	2300      	movs	r3, #0
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000098 	.word	0x20000098

08000360 <display7SEG>:
 *      Author: shiba
 */

#include"led7Seg.h"

void display7SEG(int num) {
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b09      	cmp	r3, #9
 800036c:	f200 80a2 	bhi.w	80004b4 <display7SEG+0x154>
 8000370:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <display7SEG+0x18>)
 8000372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000376:	bf00      	nop
 8000378:	080003a1 	.word	0x080003a1
 800037c:	080003bd 	.word	0x080003bd
 8000380:	080003d9 	.word	0x080003d9
 8000384:	080003f5 	.word	0x080003f5
 8000388:	08000411 	.word	0x08000411
 800038c:	0800042d 	.word	0x0800042d
 8000390:	08000449 	.word	0x08000449
 8000394:	08000465 	.word	0x08000465
 8000398:	08000481 	.word	0x08000481
 800039c:	08000499 	.word	0x08000499
	switch (num) {
//		using output data register to set value for port B
	case 0: {
//			using operator & with 0xFF00 to reset 7bits low
		GPIOB->ODR &= 0xFF80;
 80003a0:	4b4b      	ldr	r3, [pc, #300]	; (80004d0 <display7SEG+0x170>)
 80003a2:	68da      	ldr	r2, [r3, #12]
 80003a4:	494a      	ldr	r1, [pc, #296]	; (80004d0 <display7SEG+0x170>)
 80003a6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80003aa:	4013      	ands	r3, r2
 80003ac:	60cb      	str	r3, [r1, #12]
//			set value to 8bits low by using operator & to retain 8bits high
		GPIOB->ODR |= 0x0040;
 80003ae:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <display7SEG+0x170>)
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	4a47      	ldr	r2, [pc, #284]	; (80004d0 <display7SEG+0x170>)
 80003b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b8:	60d3      	str	r3, [r2, #12]
		break;
 80003ba:	e083      	b.n	80004c4 <display7SEG+0x164>
	}
	case 1: {
		GPIOB->ODR &= 0xFF80;
 80003bc:	4b44      	ldr	r3, [pc, #272]	; (80004d0 <display7SEG+0x170>)
 80003be:	68da      	ldr	r2, [r3, #12]
 80003c0:	4943      	ldr	r1, [pc, #268]	; (80004d0 <display7SEG+0x170>)
 80003c2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80003c6:	4013      	ands	r3, r2
 80003c8:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0079;
 80003ca:	4b41      	ldr	r3, [pc, #260]	; (80004d0 <display7SEG+0x170>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	4a40      	ldr	r2, [pc, #256]	; (80004d0 <display7SEG+0x170>)
 80003d0:	f043 0379 	orr.w	r3, r3, #121	; 0x79
 80003d4:	60d3      	str	r3, [r2, #12]
		break;
 80003d6:	e075      	b.n	80004c4 <display7SEG+0x164>
	}
	case 2: {
		GPIOB->ODR &= 0xFF80;
 80003d8:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <display7SEG+0x170>)
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	493c      	ldr	r1, [pc, #240]	; (80004d0 <display7SEG+0x170>)
 80003de:	f64f 7380 	movw	r3, #65408	; 0xff80
 80003e2:	4013      	ands	r3, r2
 80003e4:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0024;
 80003e6:	4b3a      	ldr	r3, [pc, #232]	; (80004d0 <display7SEG+0x170>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4a39      	ldr	r2, [pc, #228]	; (80004d0 <display7SEG+0x170>)
 80003ec:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80003f0:	60d3      	str	r3, [r2, #12]
		break;
 80003f2:	e067      	b.n	80004c4 <display7SEG+0x164>
	}
	case 3: {
		GPIOB->ODR &= 0xFF80;
 80003f4:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <display7SEG+0x170>)
 80003f6:	68da      	ldr	r2, [r3, #12]
 80003f8:	4935      	ldr	r1, [pc, #212]	; (80004d0 <display7SEG+0x170>)
 80003fa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80003fe:	4013      	ands	r3, r2
 8000400:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0030;
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <display7SEG+0x170>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	4a32      	ldr	r2, [pc, #200]	; (80004d0 <display7SEG+0x170>)
 8000408:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800040c:	60d3      	str	r3, [r2, #12]
		break;
 800040e:	e059      	b.n	80004c4 <display7SEG+0x164>
	}
	case 4: {
		GPIOB->ODR &= 0xFF80;
 8000410:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <display7SEG+0x170>)
 8000412:	68da      	ldr	r2, [r3, #12]
 8000414:	492e      	ldr	r1, [pc, #184]	; (80004d0 <display7SEG+0x170>)
 8000416:	f64f 7380 	movw	r3, #65408	; 0xff80
 800041a:	4013      	ands	r3, r2
 800041c:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0019;
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <display7SEG+0x170>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <display7SEG+0x170>)
 8000424:	f043 0319 	orr.w	r3, r3, #25
 8000428:	60d3      	str	r3, [r2, #12]
		break;
 800042a:	e04b      	b.n	80004c4 <display7SEG+0x164>
	}
	case 5: {
		GPIOB->ODR &= 0xFF80;
 800042c:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <display7SEG+0x170>)
 800042e:	68da      	ldr	r2, [r3, #12]
 8000430:	4927      	ldr	r1, [pc, #156]	; (80004d0 <display7SEG+0x170>)
 8000432:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000436:	4013      	ands	r3, r2
 8000438:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0012;
 800043a:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <display7SEG+0x170>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4a24      	ldr	r2, [pc, #144]	; (80004d0 <display7SEG+0x170>)
 8000440:	f043 0312 	orr.w	r3, r3, #18
 8000444:	60d3      	str	r3, [r2, #12]
		break;
 8000446:	e03d      	b.n	80004c4 <display7SEG+0x164>
	}
	case 6: {
		GPIOB->ODR &= 0xFF80;
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <display7SEG+0x170>)
 800044a:	68da      	ldr	r2, [r3, #12]
 800044c:	4920      	ldr	r1, [pc, #128]	; (80004d0 <display7SEG+0x170>)
 800044e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000452:	4013      	ands	r3, r2
 8000454:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0002;
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <display7SEG+0x170>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <display7SEG+0x170>)
 800045c:	f043 0302 	orr.w	r3, r3, #2
 8000460:	60d3      	str	r3, [r2, #12]
		break;
 8000462:	e02f      	b.n	80004c4 <display7SEG+0x164>
	}
	case 7: {
		GPIOB->ODR &= 0xFF80;
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <display7SEG+0x170>)
 8000466:	68da      	ldr	r2, [r3, #12]
 8000468:	4919      	ldr	r1, [pc, #100]	; (80004d0 <display7SEG+0x170>)
 800046a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800046e:	4013      	ands	r3, r2
 8000470:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0078;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <display7SEG+0x170>)
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <display7SEG+0x170>)
 8000478:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 800047c:	60d3      	str	r3, [r2, #12]
		break;
 800047e:	e021      	b.n	80004c4 <display7SEG+0x164>
	}
	case 8: {
		GPIOB->ODR &= 0xFF80;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <display7SEG+0x170>)
 8000482:	68da      	ldr	r2, [r3, #12]
 8000484:	4912      	ldr	r1, [pc, #72]	; (80004d0 <display7SEG+0x170>)
 8000486:	f64f 7380 	movw	r3, #65408	; 0xff80
 800048a:	4013      	ands	r3, r2
 800048c:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0000;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <display7SEG+0x170>)
 8000490:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <display7SEG+0x170>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	60d3      	str	r3, [r2, #12]
		break;
 8000496:	e015      	b.n	80004c4 <display7SEG+0x164>
	}
	case 9: {
		GPIOB->ODR &= 0xFF80;
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <display7SEG+0x170>)
 800049a:	68da      	ldr	r2, [r3, #12]
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <display7SEG+0x170>)
 800049e:	f64f 7380 	movw	r3, #65408	; 0xff80
 80004a2:	4013      	ands	r3, r2
 80004a4:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR |= 0x0010;
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <display7SEG+0x170>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <display7SEG+0x170>)
 80004ac:	f043 0310 	orr.w	r3, r3, #16
 80004b0:	60d3      	str	r3, [r2, #12]
		break;
 80004b2:	e007      	b.n	80004c4 <display7SEG+0x164>
	}
	default:
		GPIOB->ODR &= 0xFF80;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <display7SEG+0x170>)
 80004b6:	68da      	ldr	r2, [r3, #12]
 80004b8:	4905      	ldr	r1, [pc, #20]	; (80004d0 <display7SEG+0x170>)
 80004ba:	f64f 7380 	movw	r3, #65408	; 0xff80
 80004be:	4013      	ands	r3, r2
 80004c0:	60cb      	str	r3, [r1, #12]
		break;
 80004c2:	bf00      	nop
	}
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <setEnableSignal>:

void setEnableSignal(int index, int time1, int time2) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
	int buffer[4];
//	Logic to calculate value to display on led7seg
	buffer[0] = time1 / 10;
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	4a5f      	ldr	r2, [pc, #380]	; (8000660 <setEnableSignal+0x18c>)
 80004e4:	fb82 1203 	smull	r1, r2, r2, r3
 80004e8:	1092      	asrs	r2, r2, #2
 80004ea:	17db      	asrs	r3, r3, #31
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	613b      	str	r3, [r7, #16]
	buffer[1] = time1 % 10;
 80004f0:	68b9      	ldr	r1, [r7, #8]
 80004f2:	4b5b      	ldr	r3, [pc, #364]	; (8000660 <setEnableSignal+0x18c>)
 80004f4:	fb83 2301 	smull	r2, r3, r3, r1
 80004f8:	109a      	asrs	r2, r3, #2
 80004fa:	17cb      	asrs	r3, r1, #31
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	4613      	mov	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	1aca      	subs	r2, r1, r3
 8000508:	617a      	str	r2, [r7, #20]
	buffer[2] = time2 / 10;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a54      	ldr	r2, [pc, #336]	; (8000660 <setEnableSignal+0x18c>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	1092      	asrs	r2, r2, #2
 8000514:	17db      	asrs	r3, r3, #31
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	61bb      	str	r3, [r7, #24]
	buffer[3] = time2 % 10;
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	4b50      	ldr	r3, [pc, #320]	; (8000660 <setEnableSignal+0x18c>)
 800051e:	fb83 2301 	smull	r2, r3, r3, r1
 8000522:	109a      	asrs	r2, r3, #2
 8000524:	17cb      	asrs	r3, r1, #31
 8000526:	1ad2      	subs	r2, r2, r3
 8000528:	4613      	mov	r3, r2
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4413      	add	r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	1aca      	subs	r2, r1, r3
 8000532:	61fa      	str	r2, [r7, #28]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b03      	cmp	r3, #3
 8000538:	d876      	bhi.n	8000628 <setEnableSignal+0x154>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <setEnableSignal+0x6c>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000551 	.word	0x08000551
 8000544:	08000587 	.word	0x08000587
 8000548:	080005bd 	.word	0x080005bd
 800054c:	080005f3 	.word	0x080005f3
//	set enable signal and display
	switch (index) {
	case 0:
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	4843      	ldr	r0, [pc, #268]	; (8000664 <setEnableSignal+0x190>)
 8000556:	f001 fa94 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	4841      	ldr	r0, [pc, #260]	; (8000664 <setEnableSignal+0x190>)
 8000560:	f001 fa8f 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	483e      	ldr	r0, [pc, #248]	; (8000664 <setEnableSignal+0x190>)
 800056c:	f001 fa89 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	483b      	ldr	r0, [pc, #236]	; (8000664 <setEnableSignal+0x190>)
 8000578:	f001 fa83 	bl	8001a82 <HAL_GPIO_WritePin>

		display7SEG(buffer[0]);
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff feee 	bl	8000360 <display7SEG>
		break;
 8000584:	e067      	b.n	8000656 <setEnableSignal+0x182>
	case 1:
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2140      	movs	r1, #64	; 0x40
 800058a:	4836      	ldr	r0, [pc, #216]	; (8000664 <setEnableSignal+0x190>)
 800058c:	f001 fa79 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4833      	ldr	r0, [pc, #204]	; (8000664 <setEnableSignal+0x190>)
 8000596:	f001 fa74 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	4830      	ldr	r0, [pc, #192]	; (8000664 <setEnableSignal+0x190>)
 80005a2:	f001 fa6e 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	482d      	ldr	r0, [pc, #180]	; (8000664 <setEnableSignal+0x190>)
 80005ae:	f001 fa68 	bl	8001a82 <HAL_GPIO_WritePin>

		display7SEG(buffer[1]);
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fed3 	bl	8000360 <display7SEG>
		break;
 80005ba:	e04c      	b.n	8000656 <setEnableSignal+0x182>
	case 2:
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	4828      	ldr	r0, [pc, #160]	; (8000664 <setEnableSignal+0x190>)
 80005c2:	f001 fa5e 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4826      	ldr	r0, [pc, #152]	; (8000664 <setEnableSignal+0x190>)
 80005cc:	f001 fa59 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	4823      	ldr	r0, [pc, #140]	; (8000664 <setEnableSignal+0x190>)
 80005d8:	f001 fa53 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	4820      	ldr	r0, [pc, #128]	; (8000664 <setEnableSignal+0x190>)
 80005e4:	f001 fa4d 	bl	8001a82 <HAL_GPIO_WritePin>

		display7SEG(buffer[2]);
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff feb8 	bl	8000360 <display7SEG>
		break;
 80005f0:	e031      	b.n	8000656 <setEnableSignal+0x182>
	case 3:
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <setEnableSignal+0x190>)
 80005f8:	f001 fa43 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4818      	ldr	r0, [pc, #96]	; (8000664 <setEnableSignal+0x190>)
 8000602:	f001 fa3e 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	4815      	ldr	r0, [pc, #84]	; (8000664 <setEnableSignal+0x190>)
 800060e:	f001 fa38 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <setEnableSignal+0x190>)
 800061a:	f001 fa32 	bl	8001a82 <HAL_GPIO_WritePin>

		display7SEG(buffer[3]);
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fe9d 	bl	8000360 <display7SEG>
		break;
 8000626:	e016      	b.n	8000656 <setEnableSignal+0x182>
	default:
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <setEnableSignal+0x190>)
 800062e:	f001 fa28 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <setEnableSignal+0x190>)
 8000638:	f001 fa23 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <setEnableSignal+0x190>)
 8000644:	f001 fa1d 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <setEnableSignal+0x190>)
 8000650:	f001 fa17 	bl	8001a82 <HAL_GPIO_WritePin>
		break;
 8000654:	bf00      	nop
	}
}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	66666667 	.word	0x66666667
 8000664:	40010800 	.word	0x40010800

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 ff07 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f8fb 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f981 	bl	800097c <MX_GPIO_Init>
  MX_TIM2_Init();
 800067a:	f000 f933 	bl	80008e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800067e:	4871      	ldr	r0, [pc, #452]	; (8000844 <main+0x1dc>)
 8000680:	f001 fe68 	bl	8002354 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//	Init timer

	setTimerLed(500);
 8000684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000688:	f000 fb7c 	bl	8000d84 <setTimerLed>
	setTimerCountDown(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f000 fbad 	bl	8000dec <setTimerCountDown>
	setTimerLed7Seg(10);
 8000692:	200a      	movs	r0, #10
 8000694:	f000 fb90 	bl	8000db8 <setTimerLed7Seg>

	setTimer0(time_red * 1000);
 8000698:	4b6b      	ldr	r3, [pc, #428]	; (8000848 <main+0x1e0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fb39 	bl	8000d1c <setTimer0>
	setTimer1(time_green * 1000);
 80006aa:	4b68      	ldr	r3, [pc, #416]	; (800084c <main+0x1e4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b2:	fb02 f303 	mul.w	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fb4a 	bl	8000d50 <setTimer1>
	// index to choose which led7seg turn on when on scan led
	int index_led_on = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
	while (1) {
		fsm_traffic_automatic();
 80006c0:	f000 fc40 	bl	8000f44 <fsm_traffic_automatic>
		fsm_traffic_modify();
 80006c4:	f000 fd82 	bl	80011cc <fsm_traffic_modify>
//		increase value corresponding time when in MODIFY MODE
//		if press button or press one second will increase one unit
		if (is_button2_pressed()) {
 80006c8:	f7ff fe26 	bl	8000318 <is_button2_pressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d02e      	beq.n	8000730 <main+0xc8>
			if (status == RED_MODIFY) {
 80006d2:	4b5f      	ldr	r3, [pc, #380]	; (8000850 <main+0x1e8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006da:	4293      	cmp	r3, r2
 80006dc:	d109      	bne.n	80006f2 <main+0x8a>
				time_red++;
 80006de:	4b5a      	ldr	r3, [pc, #360]	; (8000848 <main+0x1e0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a58      	ldr	r2, [pc, #352]	; (8000848 <main+0x1e0>)
 80006e6:	6013      	str	r3, [r2, #0]
				time_modify = time_red;
 80006e8:	4b57      	ldr	r3, [pc, #348]	; (8000848 <main+0x1e0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a59      	ldr	r2, [pc, #356]	; (8000854 <main+0x1ec>)
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e01e      	b.n	8000730 <main+0xc8>
			} else if (status == YELLOW_MODIFY) {
 80006f2:	4b57      	ldr	r3, [pc, #348]	; (8000850 <main+0x1e8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f640 32ba 	movw	r2, #3002	; 0xbba
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d109      	bne.n	8000712 <main+0xaa>
				time_yellow++;
 80006fe:	4b56      	ldr	r3, [pc, #344]	; (8000858 <main+0x1f0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a54      	ldr	r2, [pc, #336]	; (8000858 <main+0x1f0>)
 8000706:	6013      	str	r3, [r2, #0]
				time_modify = time_yellow;
 8000708:	4b53      	ldr	r3, [pc, #332]	; (8000858 <main+0x1f0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a51      	ldr	r2, [pc, #324]	; (8000854 <main+0x1ec>)
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	e00e      	b.n	8000730 <main+0xc8>
			} else if (status == GREEN_MODIFY) {
 8000712:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <main+0x1e8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f640 32b9 	movw	r2, #3001	; 0xbb9
 800071a:	4293      	cmp	r3, r2
 800071c:	d108      	bne.n	8000730 <main+0xc8>
				time_green++;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <main+0x1e4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a49      	ldr	r2, [pc, #292]	; (800084c <main+0x1e4>)
 8000726:	6013      	str	r3, [r2, #0]
				time_modify = time_green;
 8000728:	4b48      	ldr	r3, [pc, #288]	; (800084c <main+0x1e4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a49      	ldr	r2, [pc, #292]	; (8000854 <main+0x1ec>)
 800072e:	6013      	str	r3, [r2, #0]
			}
		}
//		scan and display led7seg when on AUTO MODE
		if (ledMode == AUTO_MODE) {
 8000730:	4b4a      	ldr	r3, [pc, #296]	; (800085c <main+0x1f4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000738:	d116      	bne.n	8000768 <main+0x100>
			if (timerLed7Seg_flag == 1) {
 800073a:	4b49      	ldr	r3, [pc, #292]	; (8000860 <main+0x1f8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d1be      	bne.n	80006c0 <main+0x58>
				setTimerLed7Seg(250);
 8000742:	20fa      	movs	r0, #250	; 0xfa
 8000744:	f000 fb38 	bl	8000db8 <setTimerLed7Seg>
				setEnableSignal(index_led_on++, time1, time2);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	4a45      	ldr	r2, [pc, #276]	; (8000864 <main+0x1fc>)
 8000750:	6811      	ldr	r1, [r2, #0]
 8000752:	4a45      	ldr	r2, [pc, #276]	; (8000868 <main+0x200>)
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff febc 	bl	80004d4 <setEnableSignal>
				if (index_led_on > 3)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b03      	cmp	r3, #3
 8000760:	ddae      	ble.n	80006c0 <main+0x58>
					index_led_on = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e7ab      	b.n	80006c0 <main+0x58>
			}
		}
//		scan and display led7seg when on MODIFY MODE
//		on RED MODIFY MODE
		else if (status == RED_MODE || status == RED_MODIFY) {
 8000768:	4b39      	ldr	r3, [pc, #228]	; (8000850 <main+0x1e8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8000770:	4293      	cmp	r3, r2
 8000772:	d005      	beq.n	8000780 <main+0x118>
 8000774:	4b36      	ldr	r3, [pc, #216]	; (8000850 <main+0x1e8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800077c:	4293      	cmp	r3, r2
 800077e:	d115      	bne.n	80007ac <main+0x144>
			if (timerLed7Seg_flag == 1) {
 8000780:	4b37      	ldr	r3, [pc, #220]	; (8000860 <main+0x1f8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d158      	bne.n	800083a <main+0x1d2>
				setTimerLed7Seg(250);
 8000788:	20fa      	movs	r0, #250	; 0xfa
 800078a:	f000 fb15 	bl	8000db8 <setTimerLed7Seg>
				setEnableSignal(index_led_on++, time_modify, 2);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <main+0x1ec>)
 8000796:	6811      	ldr	r1, [r2, #0]
 8000798:	2202      	movs	r2, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fe9a 	bl	80004d4 <setEnableSignal>
				if (index_led_on > 3)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	dd49      	ble.n	800083a <main+0x1d2>
					index_led_on = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
			if (timerLed7Seg_flag == 1) {
 80007aa:	e046      	b.n	800083a <main+0x1d2>
			}
		}
//		on YELLOW MODIFY MODE
		else if (status == YELLOW_MODE || status == YELLOW_MODIFY) {
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <main+0x1e8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f240 72d3 	movw	r2, #2003	; 0x7d3
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d005      	beq.n	80007c4 <main+0x15c>
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <main+0x1e8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f640 32ba 	movw	r2, #3002	; 0xbba
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d115      	bne.n	80007f0 <main+0x188>
			if (timerLed7Seg_flag == 1) {
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <main+0x1f8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d138      	bne.n	800083e <main+0x1d6>
				setTimerLed7Seg(250);
 80007cc:	20fa      	movs	r0, #250	; 0xfa
 80007ce:	f000 faf3 	bl	8000db8 <setTimerLed7Seg>
				setEnableSignal(index_led_on++, time_modify, 3);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <main+0x1ec>)
 80007da:	6811      	ldr	r1, [r2, #0]
 80007dc:	2203      	movs	r2, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fe78 	bl	80004d4 <setEnableSignal>
				if (index_led_on > 3)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	dd29      	ble.n	800083e <main+0x1d6>
					index_led_on = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
			if (timerLed7Seg_flag == 1) {
 80007ee:	e026      	b.n	800083e <main+0x1d6>
			}
		}
//		on GREEN MODIFY MODE
		else if (status == GREEN_MODE || status == GREEN_MODIFY) {
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <main+0x1e8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f240 72d2 	movw	r2, #2002	; 0x7d2
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d006      	beq.n	800080a <main+0x1a2>
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <main+0x1e8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8000804:	4293      	cmp	r3, r2
 8000806:	f47f af5b 	bne.w	80006c0 <main+0x58>
			if (timerLed7Seg_flag == 1) {
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <main+0x1f8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	f47f af56 	bne.w	80006c0 <main+0x58>
				setTimerLed7Seg(250);
 8000814:	20fa      	movs	r0, #250	; 0xfa
 8000816:	f000 facf 	bl	8000db8 <setTimerLed7Seg>
				setEnableSignal(index_led_on++, time_modify, 4);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <main+0x1ec>)
 8000822:	6811      	ldr	r1, [r2, #0]
 8000824:	2204      	movs	r2, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe54 	bl	80004d4 <setEnableSignal>
				if (index_led_on > 3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b03      	cmp	r3, #3
 8000830:	f77f af46 	ble.w	80006c0 <main+0x58>
					index_led_on = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	e742      	b.n	80006c0 <main+0x58>
			if (timerLed7Seg_flag == 1) {
 800083a:	bf00      	nop
 800083c:	e740      	b.n	80006c0 <main+0x58>
			if (timerLed7Seg_flag == 1) {
 800083e:	bf00      	nop
		fsm_traffic_automatic();
 8000840:	e73e      	b.n	80006c0 <main+0x58>
 8000842:	bf00      	nop
 8000844:	200000c8 	.word	0x200000c8
 8000848:	20000058 	.word	0x20000058
 800084c:	2000005c 	.word	0x2000005c
 8000850:	2000003c 	.word	0x2000003c
 8000854:	2000009c 	.word	0x2000009c
 8000858:	20000060 	.word	0x20000060
 800085c:	20000040 	.word	0x20000040
 8000860:	200000b8 	.word	0x200000b8
 8000864:	20000064 	.word	0x20000064
 8000868:	20000068 	.word	0x20000068

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b090      	sub	sp, #64	; 0x40
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	2228      	movs	r2, #40	; 0x28
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f922 	bl	8002ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000892:	2301      	movs	r3, #1
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000896:	2310      	movs	r3, #16
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f91e 	bl	8001ae4 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ae:	f000 f8d5 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fb8a 	bl	8001fe4 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008d6:	f000 f8c1 	bl	8000a5c <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3740      	adds	r7, #64	; 0x40
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM2_Init+0x94>)
 8000902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM2_Init+0x94>)
 800090a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800090e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_TIM2_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM2_Init+0x94>)
 8000918:	220a      	movs	r2, #10
 800091a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM2_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM2_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <MX_TIM2_Init+0x94>)
 800092a:	f001 fcc3 	bl	80022b4 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000934:	f000 f892 	bl	8000a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM2_Init+0x94>)
 8000946:	f001 fe59 	bl	80025fc <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000950:	f000 f884 	bl	8000a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM2_Init+0x94>)
 8000962:	f002 f821 	bl	80029a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f876 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000c8 	.word	0x200000c8

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_GPIO_Init+0xbc>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xbc>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_GPIO_Init+0xbc>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xbc>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xbc>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_GPIO_Init+0xbc>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <MX_GPIO_Init+0xc0>)
 80009c8:	f001 f85b 	bl	8001a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|LED_RED_2_Pin
 80009cc:	2200      	movs	r2, #0
 80009ce:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80009d2:	481b      	ldr	r0, [pc, #108]	; (8000a40 <MX_GPIO_Init+0xc4>)
 80009d4:	f001 f855 	bl	8001a82 <HAL_GPIO_WritePin>
                          |LED_GREEN_2_Pin|LED_YELLOW_2_Pin|SEG_3_Pin|SEG_4_Pin
                          |SEG_5_Pin|SEG_6_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
                          |LED_YELLOW_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_0_Pin EN_1_Pin EN_2_Pin EN_3_Pin */
  GPIO_InitStruct.Pin = EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin;
 80009d8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80009dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2302      	movs	r3, #2
 80009e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <MX_GPIO_Init+0xc0>)
 80009f2:	f000 feb5 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin LED_RED_2_Pin
                           LED_GREEN_2_Pin LED_YELLOW_2_Pin SEG_3_Pin SEG_4_Pin
                           SEG_5_Pin SEG_6_Pin LED_RED_1_Pin LED_GREEN_1_Pin
                           LED_YELLOW_1_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|LED_RED_2_Pin
 80009f6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009fa:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN_2_Pin|LED_YELLOW_2_Pin|SEG_3_Pin|SEG_4_Pin
                          |SEG_5_Pin|SEG_6_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
                          |LED_YELLOW_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_GPIO_Init+0xc4>)
 8000a10:	f000 fea6 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0xc0>)
 8000a2a:	f000 fe99 	bl	8001760 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	40010c00 	.word	0x40010c00

08000a44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000a4c:	f7ff fba2 	bl	8000194 <getKeyInput>
	timerRun();
 8000a50:	f000 f9e6 	bl	8000e20 <timerRun>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <set_traffic_light>:
 */

#include"set_traffic_light.h"

// set traffic light state for specific road one or two
void set_traffic_light(int led_state, int road) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	switch (led_state) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b66      	cmp	r3, #102	; 0x66
 8000a76:	d060      	beq.n	8000b3a <set_traffic_light+0xd2>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b66      	cmp	r3, #102	; 0x66
 8000a7c:	f300 8088 	bgt.w	8000b90 <set_traffic_light+0x128>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b64      	cmp	r3, #100	; 0x64
 8000a84:	d003      	beq.n	8000a8e <set_traffic_light+0x26>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b65      	cmp	r3, #101	; 0x65
 8000a8a:	d02b      	beq.n	8000ae4 <set_traffic_light+0x7c>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
		}
		break;
	default:
		break;
 8000a8c:	e080      	b.n	8000b90 <set_traffic_light+0x128>
		if (road == 1) {
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d111      	bne.n	8000ab8 <set_traffic_light+0x50>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	4843      	ldr	r0, [pc, #268]	; (8000ba8 <set_traffic_light+0x140>)
 8000a9a:	f000 fff2 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa4:	4840      	ldr	r0, [pc, #256]	; (8000ba8 <set_traffic_light+0x140>)
 8000aa6:	f000 ffec 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab0:	483d      	ldr	r0, [pc, #244]	; (8000ba8 <set_traffic_light+0x140>)
 8000ab2:	f000 ffe6 	bl	8001a82 <HAL_GPIO_WritePin>
		break;
 8000ab6:	e06d      	b.n	8000b94 <set_traffic_light+0x12c>
		} else if (road == 2) {
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d16a      	bne.n	8000b94 <set_traffic_light+0x12c>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac4:	4838      	ldr	r0, [pc, #224]	; (8000ba8 <set_traffic_light+0x140>)
 8000ac6:	f000 ffdc 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad0:	4835      	ldr	r0, [pc, #212]	; (8000ba8 <set_traffic_light+0x140>)
 8000ad2:	f000 ffd6 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	4832      	ldr	r0, [pc, #200]	; (8000ba8 <set_traffic_light+0x140>)
 8000ade:	f000 ffd0 	bl	8001a82 <HAL_GPIO_WritePin>
		break;
 8000ae2:	e057      	b.n	8000b94 <set_traffic_light+0x12c>
		if (road == 1) {
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d111      	bne.n	8000b0e <set_traffic_light+0xa6>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	482e      	ldr	r0, [pc, #184]	; (8000ba8 <set_traffic_light+0x140>)
 8000af0:	f000 ffc7 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	482b      	ldr	r0, [pc, #172]	; (8000ba8 <set_traffic_light+0x140>)
 8000afc:	f000 ffc1 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b06:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <set_traffic_light+0x140>)
 8000b08:	f000 ffbb 	bl	8001a82 <HAL_GPIO_WritePin>
		break;
 8000b0c:	e044      	b.n	8000b98 <set_traffic_light+0x130>
		} else if (road == 2) {
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d141      	bne.n	8000b98 <set_traffic_light+0x130>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <set_traffic_light+0x140>)
 8000b1c:	f000 ffb1 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b26:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <set_traffic_light+0x140>)
 8000b28:	f000 ffab 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b32:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <set_traffic_light+0x140>)
 8000b34:	f000 ffa5 	bl	8001a82 <HAL_GPIO_WritePin>
		break;
 8000b38:	e02e      	b.n	8000b98 <set_traffic_light+0x130>
		if (road == 1) {
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d111      	bne.n	8000b64 <set_traffic_light+0xfc>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <set_traffic_light+0x140>)
 8000b46:	f000 ff9c 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <set_traffic_light+0x140>)
 8000b52:	f000 ff96 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <set_traffic_light+0x140>)
 8000b5e:	f000 ff90 	bl	8001a82 <HAL_GPIO_WritePin>
		break;
 8000b62:	e01b      	b.n	8000b9c <set_traffic_light+0x134>
		} else if (road == 2) {
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d118      	bne.n	8000b9c <set_traffic_light+0x134>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <set_traffic_light+0x140>)
 8000b72:	f000 ff86 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <set_traffic_light+0x140>)
 8000b7e:	f000 ff80 	bl	8001a82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <set_traffic_light+0x140>)
 8000b8a:	f000 ff7a 	bl	8001a82 <HAL_GPIO_WritePin>
		break;
 8000b8e:	e005      	b.n	8000b9c <set_traffic_light+0x134>
		break;
 8000b90:	bf00      	nop
 8000b92:	e004      	b.n	8000b9e <set_traffic_light+0x136>
		break;
 8000b94:	bf00      	nop
 8000b96:	e002      	b.n	8000b9e <set_traffic_light+0x136>
		break;
 8000b98:	bf00      	nop
 8000b9a:	e000      	b.n	8000b9e <set_traffic_light+0x136>
		break;
 8000b9c:	bf00      	nop
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <clearLight>:
// turn off all traffic led
void clearLight() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <clearLight+0x50>)
 8000bb6:	f000 ff64 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <clearLight+0x50>)
 8000bc2:	f000 ff5e 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <clearLight+0x50>)
 8000bce:	f000 ff58 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <clearLight+0x50>)
 8000bda:	f000 ff52 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <clearLight+0x50>)
 8000be6:	f000 ff4c 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <clearLight+0x50>)
 8000bf2:	f000 ff46 	bl	8001a82 <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_MspInit+0x60>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_MspInit+0x60>)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000

08000c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d113      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_TIM_Base_MspInit+0x44>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <HAL_TIM_Base_MspInit+0x44>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_TIM_Base_MspInit+0x44>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	201c      	movs	r0, #28
 8000c94:	f000 fd2d 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c98:	201c      	movs	r0, #28
 8000c9a:	f000 fd46 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f000 fc0b 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <TIM2_IRQHandler+0x10>)
 8000d02:	f001 fb73 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000c8 	.word	0x200000c8

08000d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <setTimer0>:
int timerLed7Seg_counter = 0;
// timer for count down time when display on led 7 seg
int timerCountDown_flag = 0;
int timerCountDown_counter = 0;
// function to set counter for timer0
void setTimer0(int duration) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	timer0_flag = 0;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <setTimer0+0x28>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
	timer0_counter = duration / TIMER_CYCLE;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <setTimer0+0x2c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d34:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <setTimer0+0x30>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000a0 	.word	0x200000a0
 8000d48:	20000050 	.word	0x20000050
 8000d4c:	200000a4 	.word	0x200000a4

08000d50 <setTimer1>:
// function to set counter for timer1
void setTimer1(int duration) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <setTimer1+0x28>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
	timer1_counter = duration / TIMER_CYCLE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <setTimer1+0x2c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <setTimer1+0x30>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	20000050 	.word	0x20000050
 8000d80:	200000ac 	.word	0x200000ac

08000d84 <setTimerLed>:
// function to set counter for timer Led blink
void setTimerLed(int duration) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	timerLed_flag = 0;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <setTimerLed+0x28>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
	timerLed_counter = duration / TIMER_CYCLE;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <setTimerLed+0x2c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d9c:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <setTimerLed+0x30>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	200000b0 	.word	0x200000b0
 8000db0:	20000050 	.word	0x20000050
 8000db4:	200000b4 	.word	0x200000b4

08000db8 <setTimerLed7Seg>:
// function to set counter for timer scan led7seg
void setTimerLed7Seg(int duration) {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	timerLed7Seg_flag = 0;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <setTimerLed7Seg+0x28>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
	timerLed7Seg_counter = duration / TIMER_CYCLE;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <setTimerLed7Seg+0x2c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <setTimerLed7Seg+0x30>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	200000b8 	.word	0x200000b8
 8000de4:	20000050 	.word	0x20000050
 8000de8:	200000bc 	.word	0x200000bc

08000dec <setTimerCountDown>:
// function to set counter for timer count down time
void setTimerCountDown(int duration) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	timerCountDown_flag = 0;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <setTimerCountDown+0x28>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
	timerCountDown_counter = duration / TIMER_CYCLE;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <setTimerCountDown+0x2c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <setTimerCountDown+0x30>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200000c0 	.word	0x200000c0
 8000e18:	20000050 	.word	0x20000050
 8000e1c:	200000c4 	.word	0x200000c4

08000e20 <timerRun>:
// run timer
void timerRun() {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <timerRun+0xac>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dd0b      	ble.n	8000e44 <timerRun+0x24>
		timer0_counter--;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <timerRun+0xac>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <timerRun+0xac>)
 8000e34:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0) {
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <timerRun+0xac>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dc02      	bgt.n	8000e44 <timerRun+0x24>
			timer0_flag = 1;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <timerRun+0xb0>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer1_counter > 0) {
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <timerRun+0xb4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dd0b      	ble.n	8000e64 <timerRun+0x44>
		timer1_counter--;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <timerRun+0xb4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <timerRun+0xb4>)
 8000e54:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <timerRun+0xb4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dc02      	bgt.n	8000e64 <timerRun+0x44>
			timer1_flag = 1;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <timerRun+0xb8>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
		}
	}
	if (timerLed_counter > 0) {
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <timerRun+0xbc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd0b      	ble.n	8000e84 <timerRun+0x64>
		timerLed_counter--;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <timerRun+0xbc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <timerRun+0xbc>)
 8000e74:	6013      	str	r3, [r2, #0]
		if (timerLed_counter <= 0) {
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <timerRun+0xbc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dc02      	bgt.n	8000e84 <timerRun+0x64>
			timerLed_flag = 1;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <timerRun+0xc0>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
		}
	}
	if (timerLed7Seg_counter > 0) {
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <timerRun+0xc4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dd0b      	ble.n	8000ea4 <timerRun+0x84>
		timerLed7Seg_counter--;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <timerRun+0xc4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <timerRun+0xc4>)
 8000e94:	6013      	str	r3, [r2, #0]
		if (timerLed7Seg_counter <= 0) {
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <timerRun+0xc4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	dc02      	bgt.n	8000ea4 <timerRun+0x84>
			timerLed7Seg_flag = 1;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <timerRun+0xc8>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
		}
	}

	if (timerCountDown_counter > 0) {
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <timerRun+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dd0b      	ble.n	8000ec4 <timerRun+0xa4>
		timerCountDown_counter--;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <timerRun+0xcc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <timerRun+0xcc>)
 8000eb4:	6013      	str	r3, [r2, #0]
		if (timerCountDown_counter <= 0) {
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <timerRun+0xcc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	dc02      	bgt.n	8000ec4 <timerRun+0xa4>
			timerCountDown_flag = 1;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <timerRun+0xd0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	200000a4 	.word	0x200000a4
 8000ed0:	200000a0 	.word	0x200000a0
 8000ed4:	200000ac 	.word	0x200000ac
 8000ed8:	200000a8 	.word	0x200000a8
 8000edc:	200000b4 	.word	0x200000b4
 8000ee0:	200000b0 	.word	0x200000b0
 8000ee4:	200000bc 	.word	0x200000bc
 8000ee8:	200000b8 	.word	0x200000b8
 8000eec:	200000c4 	.word	0x200000c4
 8000ef0:	200000c0 	.word	0x200000c0

08000ef4 <is_change_mode>:
//	Set default value time display on led7SEG when using first time
int time1 = 5;
int time2 = 3;

//	check if change from AUTO MODE to MODIFY MODE
void is_change_mode() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	if (is_button1_pressed()) {
 8000ef8:	f7ff f9fc 	bl	80002f4 <is_button1_pressed>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d014      	beq.n	8000f2c <is_change_mode+0x38>
		clearLight();
 8000f02:	f7ff fe53 	bl	8000bac <clearLight>
		status = RED_MODE;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <is_change_mode+0x3c>)
 8000f08:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8000f0c:	601a      	str	r2, [r3, #0]
		ledMode = MODIFY_MODE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <is_change_mode+0x40>)
 8000f10:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f14:	601a      	str	r2, [r3, #0]

		status_1 = MODIFY_MODE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <is_change_mode+0x44>)
 8000f18:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f1c:	601a      	str	r2, [r3, #0]
		status_2 = MODIFY_MODE;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <is_change_mode+0x48>)
 8000f20:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f24:	601a      	str	r2, [r3, #0]

		time_modify = 0;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <is_change_mode+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000003c 	.word	0x2000003c
 8000f34:	20000040 	.word	0x20000040
 8000f38:	20000044 	.word	0x20000044
 8000f3c:	20000048 	.word	0x20000048
 8000f40:	2000009c 	.word	0x2000009c

08000f44 <fsm_traffic_automatic>:
//	FSM for run automatic traffic led
void fsm_traffic_automatic() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
//	FSM for road 1
	switch (status_1) {
 8000f48:	4b79      	ldr	r3, [pc, #484]	; (8001130 <fsm_traffic_automatic+0x1ec>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b66      	cmp	r3, #102	; 0x66
 8000f4e:	d061      	beq.n	8001014 <fsm_traffic_automatic+0xd0>
 8000f50:	2b66      	cmp	r3, #102	; 0x66
 8000f52:	f300 808c 	bgt.w	800106e <fsm_traffic_automatic+0x12a>
 8000f56:	2b64      	cmp	r3, #100	; 0x64
 8000f58:	d002      	beq.n	8000f60 <fsm_traffic_automatic+0x1c>
 8000f5a:	2b65      	cmp	r3, #101	; 0x65
 8000f5c:	d02d      	beq.n	8000fba <fsm_traffic_automatic+0x76>
			time1 = time_red;
		}
		is_change_mode();
		break;
	default:
		break;
 8000f5e:	e086      	b.n	800106e <fsm_traffic_automatic+0x12a>
		set_traffic_light(RED, 1);
 8000f60:	2101      	movs	r1, #1
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f7ff fd80 	bl	8000a68 <set_traffic_light>
		if (timerCountDown_flag == 1) {
 8000f68:	4b72      	ldr	r3, [pc, #456]	; (8001134 <fsm_traffic_automatic+0x1f0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10d      	bne.n	8000f8c <fsm_traffic_automatic+0x48>
			setTimerCountDown(1000);
 8000f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f74:	f7ff ff3a 	bl	8000dec <setTimerCountDown>
			time1--;
 8000f78:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a6e      	ldr	r2, [pc, #440]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 8000f80:	6013      	str	r3, [r2, #0]
			time2--;
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <fsm_traffic_automatic+0x1f8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4a6c      	ldr	r2, [pc, #432]	; (800113c <fsm_traffic_automatic+0x1f8>)
 8000f8a:	6013      	str	r3, [r2, #0]
		if (timer0_flag == 1) {
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <fsm_traffic_automatic+0x1fc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10f      	bne.n	8000fb4 <fsm_traffic_automatic+0x70>
			setTimer0(time_green * SCALE);
 8000f94:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <fsm_traffic_automatic+0x200>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a6b      	ldr	r2, [pc, #428]	; (8001148 <fsm_traffic_automatic+0x204>)
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff febb 	bl	8000d1c <setTimer0>
			status_1 = GREEN;
 8000fa6:	4b62      	ldr	r3, [pc, #392]	; (8001130 <fsm_traffic_automatic+0x1ec>)
 8000fa8:	2265      	movs	r2, #101	; 0x65
 8000faa:	601a      	str	r2, [r3, #0]
			time1 = time_green;
 8000fac:	4b65      	ldr	r3, [pc, #404]	; (8001144 <fsm_traffic_automatic+0x200>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a61      	ldr	r2, [pc, #388]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 8000fb2:	6013      	str	r3, [r2, #0]
		is_change_mode();
 8000fb4:	f7ff ff9e 	bl	8000ef4 <is_change_mode>
		break;
 8000fb8:	e05a      	b.n	8001070 <fsm_traffic_automatic+0x12c>
		set_traffic_light(GREEN, 1);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2065      	movs	r0, #101	; 0x65
 8000fbe:	f7ff fd53 	bl	8000a68 <set_traffic_light>
		if (timerCountDown_flag == 1) {
 8000fc2:	4b5c      	ldr	r3, [pc, #368]	; (8001134 <fsm_traffic_automatic+0x1f0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d10d      	bne.n	8000fe6 <fsm_traffic_automatic+0xa2>
			setTimerCountDown(1000);
 8000fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fce:	f7ff ff0d 	bl	8000dec <setTimerCountDown>
			time1--;
 8000fd2:	4b59      	ldr	r3, [pc, #356]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a57      	ldr	r2, [pc, #348]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 8000fda:	6013      	str	r3, [r2, #0]
			time2--;
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <fsm_traffic_automatic+0x1f8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	4a56      	ldr	r2, [pc, #344]	; (800113c <fsm_traffic_automatic+0x1f8>)
 8000fe4:	6013      	str	r3, [r2, #0]
		if (timer0_flag == 1) {
 8000fe6:	4b56      	ldr	r3, [pc, #344]	; (8001140 <fsm_traffic_automatic+0x1fc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d10f      	bne.n	800100e <fsm_traffic_automatic+0xca>
			setTimer0(time_yellow * SCALE);
 8000fee:	4b57      	ldr	r3, [pc, #348]	; (800114c <fsm_traffic_automatic+0x208>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a55      	ldr	r2, [pc, #340]	; (8001148 <fsm_traffic_automatic+0x204>)
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe8e 	bl	8000d1c <setTimer0>
			status_1 = YELLOW;
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <fsm_traffic_automatic+0x1ec>)
 8001002:	2266      	movs	r2, #102	; 0x66
 8001004:	601a      	str	r2, [r3, #0]
			time1 = time_yellow;
 8001006:	4b51      	ldr	r3, [pc, #324]	; (800114c <fsm_traffic_automatic+0x208>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a4b      	ldr	r2, [pc, #300]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 800100c:	6013      	str	r3, [r2, #0]
		is_change_mode();
 800100e:	f7ff ff71 	bl	8000ef4 <is_change_mode>
		break;
 8001012:	e02d      	b.n	8001070 <fsm_traffic_automatic+0x12c>
		set_traffic_light(YELLOW, 1);
 8001014:	2101      	movs	r1, #1
 8001016:	2066      	movs	r0, #102	; 0x66
 8001018:	f7ff fd26 	bl	8000a68 <set_traffic_light>
		if (timerCountDown_flag == 1) {
 800101c:	4b45      	ldr	r3, [pc, #276]	; (8001134 <fsm_traffic_automatic+0x1f0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10d      	bne.n	8001040 <fsm_traffic_automatic+0xfc>
			setTimerCountDown(1000);
 8001024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001028:	f7ff fee0 	bl	8000dec <setTimerCountDown>
			time1--;
 800102c:	4b42      	ldr	r3, [pc, #264]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3b01      	subs	r3, #1
 8001032:	4a41      	ldr	r2, [pc, #260]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 8001034:	6013      	str	r3, [r2, #0]
			time2--;
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <fsm_traffic_automatic+0x1f8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3b01      	subs	r3, #1
 800103c:	4a3f      	ldr	r2, [pc, #252]	; (800113c <fsm_traffic_automatic+0x1f8>)
 800103e:	6013      	str	r3, [r2, #0]
		if (timer0_flag == 1) {
 8001040:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <fsm_traffic_automatic+0x1fc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10f      	bne.n	8001068 <fsm_traffic_automatic+0x124>
			setTimer0(time_red * SCALE);
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <fsm_traffic_automatic+0x20c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	; (8001148 <fsm_traffic_automatic+0x204>)
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe61 	bl	8000d1c <setTimer0>
			status_1 = RED;
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <fsm_traffic_automatic+0x1ec>)
 800105c:	2264      	movs	r2, #100	; 0x64
 800105e:	601a      	str	r2, [r3, #0]
			time1 = time_red;
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <fsm_traffic_automatic+0x20c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a34      	ldr	r2, [pc, #208]	; (8001138 <fsm_traffic_automatic+0x1f4>)
 8001066:	6013      	str	r3, [r2, #0]
		is_change_mode();
 8001068:	f7ff ff44 	bl	8000ef4 <is_change_mode>
		break;
 800106c:	e000      	b.n	8001070 <fsm_traffic_automatic+0x12c>
		break;
 800106e:	bf00      	nop
	}
//  FSM for road 2
	switch (status_2) {
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <fsm_traffic_automatic+0x210>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b66      	cmp	r3, #102	; 0x66
 8001076:	d03c      	beq.n	80010f2 <fsm_traffic_automatic+0x1ae>
 8001078:	2b66      	cmp	r3, #102	; 0x66
 800107a:	dc55      	bgt.n	8001128 <fsm_traffic_automatic+0x1e4>
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d002      	beq.n	8001086 <fsm_traffic_automatic+0x142>
 8001080:	2b65      	cmp	r3, #101	; 0x65
 8001082:	d01b      	beq.n	80010bc <fsm_traffic_automatic+0x178>
			time2 = time_red;
		}
		is_change_mode();
		break;
	default:
		break;
 8001084:	e050      	b.n	8001128 <fsm_traffic_automatic+0x1e4>
		set_traffic_light(RED, 2);
 8001086:	2102      	movs	r1, #2
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f7ff fced 	bl	8000a68 <set_traffic_light>
		if (timer1_flag == 1) {
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <fsm_traffic_automatic+0x214>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d10f      	bne.n	80010b6 <fsm_traffic_automatic+0x172>
			setTimer1(time_green * SCALE);
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <fsm_traffic_automatic+0x200>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <fsm_traffic_automatic+0x204>)
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fe54 	bl	8000d50 <setTimer1>
			status_2 = GREEN;
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <fsm_traffic_automatic+0x210>)
 80010aa:	2265      	movs	r2, #101	; 0x65
 80010ac:	601a      	str	r2, [r3, #0]
			time2 = time_green;
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <fsm_traffic_automatic+0x200>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <fsm_traffic_automatic+0x1f8>)
 80010b4:	6013      	str	r3, [r2, #0]
		is_change_mode();
 80010b6:	f7ff ff1d 	bl	8000ef4 <is_change_mode>
		break;
 80010ba:	e036      	b.n	800112a <fsm_traffic_automatic+0x1e6>
		set_traffic_light(GREEN, 2);
 80010bc:	2102      	movs	r1, #2
 80010be:	2065      	movs	r0, #101	; 0x65
 80010c0:	f7ff fcd2 	bl	8000a68 <set_traffic_light>
		if (timer1_flag == 1) {
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <fsm_traffic_automatic+0x214>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10f      	bne.n	80010ec <fsm_traffic_automatic+0x1a8>
			setTimer1(time_yellow * SCALE);
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <fsm_traffic_automatic+0x208>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <fsm_traffic_automatic+0x204>)
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe39 	bl	8000d50 <setTimer1>
			status_2 = YELLOW;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <fsm_traffic_automatic+0x210>)
 80010e0:	2266      	movs	r2, #102	; 0x66
 80010e2:	601a      	str	r2, [r3, #0]
			time2 = time_yellow;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <fsm_traffic_automatic+0x208>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <fsm_traffic_automatic+0x1f8>)
 80010ea:	6013      	str	r3, [r2, #0]
		is_change_mode();
 80010ec:	f7ff ff02 	bl	8000ef4 <is_change_mode>
		break;
 80010f0:	e01b      	b.n	800112a <fsm_traffic_automatic+0x1e6>
		set_traffic_light(YELLOW, 2);
 80010f2:	2102      	movs	r1, #2
 80010f4:	2066      	movs	r0, #102	; 0x66
 80010f6:	f7ff fcb7 	bl	8000a68 <set_traffic_light>
		if (timer1_flag == 1) {
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <fsm_traffic_automatic+0x214>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d10f      	bne.n	8001122 <fsm_traffic_automatic+0x1de>
			setTimer1(time_red * SCALE);
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <fsm_traffic_automatic+0x20c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <fsm_traffic_automatic+0x204>)
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe1e 	bl	8000d50 <setTimer1>
			status_2 = RED;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <fsm_traffic_automatic+0x210>)
 8001116:	2264      	movs	r2, #100	; 0x64
 8001118:	601a      	str	r2, [r3, #0]
			time2 = time_red;
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <fsm_traffic_automatic+0x20c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <fsm_traffic_automatic+0x1f8>)
 8001120:	6013      	str	r3, [r2, #0]
		is_change_mode();
 8001122:	f7ff fee7 	bl	8000ef4 <is_change_mode>
		break;
 8001126:	e000      	b.n	800112a <fsm_traffic_automatic+0x1e6>
		break;
 8001128:	bf00      	nop
	}
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000044 	.word	0x20000044
 8001134:	200000c0 	.word	0x200000c0
 8001138:	20000064 	.word	0x20000064
 800113c:	20000068 	.word	0x20000068
 8001140:	200000a0 	.word	0x200000a0
 8001144:	2000005c 	.word	0x2000005c
 8001148:	20000054 	.word	0x20000054
 800114c:	20000060 	.word	0x20000060
 8001150:	20000058 	.word	0x20000058
 8001154:	20000048 	.word	0x20000048
 8001158:	200000a8 	.word	0x200000a8

0800115c <traffic_blink>:
 *      Author: shiba
 */

#include"traffic_blink.h"
// blink specific traffic led
void traffic_blink(int state) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	switch (state) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b66      	cmp	r3, #102	; 0x66
 8001168:	d01e      	beq.n	80011a8 <traffic_blink+0x4c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b66      	cmp	r3, #102	; 0x66
 800116e:	dc26      	bgt.n	80011be <traffic_blink+0x62>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d003      	beq.n	800117e <traffic_blink+0x22>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b65      	cmp	r3, #101	; 0x65
 800117a:	d00a      	beq.n	8001192 <traffic_blink+0x36>
	case YELLOW:
		HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
		HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
		break;
	default:
		break;
 800117c:	e01f      	b.n	80011be <traffic_blink+0x62>
		HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <traffic_blink+0x6c>)
 8001182:	f000 fc96 	bl	8001ab2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8001186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <traffic_blink+0x6c>)
 800118c:	f000 fc91 	bl	8001ab2 <HAL_GPIO_TogglePin>
		break;
 8001190:	e016      	b.n	80011c0 <traffic_blink+0x64>
		HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8001192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <traffic_blink+0x6c>)
 8001198:	f000 fc8b 	bl	8001ab2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 800119c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <traffic_blink+0x6c>)
 80011a2:	f000 fc86 	bl	8001ab2 <HAL_GPIO_TogglePin>
		break;
 80011a6:	e00b      	b.n	80011c0 <traffic_blink+0x64>
		HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <traffic_blink+0x6c>)
 80011ae:	f000 fc80 	bl	8001ab2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 80011b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <traffic_blink+0x6c>)
 80011b8:	f000 fc7b 	bl	8001ab2 <HAL_GPIO_TogglePin>
		break;
 80011bc:	e000      	b.n	80011c0 <traffic_blink+0x64>
		break;
 80011be:	bf00      	nop
	}
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010c00 	.word	0x40010c00

080011cc <fsm_traffic_modify>:
 *      Author: shiba
 */

#include"traffic_modify.h"

void fsm_traffic_modify() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	switch (status) {
 80011d0:	4b8d      	ldr	r3, [pc, #564]	; (8001408 <fsm_traffic_modify+0x23c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f640 32ba 	movw	r2, #3002	; 0xbba
 80011d8:	4293      	cmp	r3, r2
 80011da:	f000 808e 	beq.w	80012fa <fsm_traffic_modify+0x12e>
 80011de:	f640 32ba 	movw	r2, #3002	; 0xbba
 80011e2:	4293      	cmp	r3, r2
 80011e4:	f300 8100 	bgt.w	80013e8 <fsm_traffic_modify+0x21c>
 80011e8:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80011ec:	4293      	cmp	r3, r2
 80011ee:	f000 80e6 	beq.w	80013be <fsm_traffic_modify+0x1f2>
 80011f2:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80011f6:	4293      	cmp	r3, r2
 80011f8:	f300 80f6 	bgt.w	80013e8 <fsm_traffic_modify+0x21c>
 80011fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001200:	4293      	cmp	r3, r2
 8001202:	d03d      	beq.n	8001280 <fsm_traffic_modify+0xb4>
 8001204:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001208:	4293      	cmp	r3, r2
 800120a:	f300 80ed 	bgt.w	80013e8 <fsm_traffic_modify+0x21c>
 800120e:	f240 72d3 	movw	r2, #2003	; 0x7d3
 8001212:	4293      	cmp	r3, r2
 8001214:	d04a      	beq.n	80012ac <fsm_traffic_modify+0xe0>
 8001216:	f240 72d3 	movw	r2, #2003	; 0x7d3
 800121a:	4293      	cmp	r3, r2
 800121c:	f300 80e4 	bgt.w	80013e8 <fsm_traffic_modify+0x21c>
 8001220:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8001224:	4293      	cmp	r3, r2
 8001226:	d004      	beq.n	8001232 <fsm_traffic_modify+0x66>
 8001228:	f240 72d2 	movw	r2, #2002	; 0x7d2
 800122c:	4293      	cmp	r3, r2
 800122e:	d079      	beq.n	8001324 <fsm_traffic_modify+0x158>
		if (is_button3_pressed()) {
			status = GREEN_MODE;
		}
		break;
	default:
		break;
 8001230:	e0da      	b.n	80013e8 <fsm_traffic_modify+0x21c>
		if (timerLed_flag == 1) {
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <fsm_traffic_modify+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d106      	bne.n	8001248 <fsm_traffic_modify+0x7c>
			setTimerLed(500);
 800123a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123e:	f7ff fda1 	bl	8000d84 <setTimerLed>
			traffic_blink(RED);
 8001242:	2064      	movs	r0, #100	; 0x64
 8001244:	f7ff ff8a 	bl	800115c <traffic_blink>
		if (is_button1_pressed()) {
 8001248:	f7ff f854 	bl	80002f4 <is_button1_pressed>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <fsm_traffic_modify+0x98>
			clearLight();
 8001252:	f7ff fcab 	bl	8000bac <clearLight>
			status = YELLOW_MODE;
 8001256:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <fsm_traffic_modify+0x23c>)
 8001258:	f240 72d3 	movw	r2, #2003	; 0x7d3
 800125c:	601a      	str	r2, [r3, #0]
			time_modify = 0;
 800125e:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <fsm_traffic_modify+0x244>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
		if (is_button2_pressed()) {
 8001264:	f7ff f858 	bl	8000318 <is_button2_pressed>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80be 	beq.w	80013ec <fsm_traffic_modify+0x220>
			status = RED_MODIFY;
 8001270:	4b65      	ldr	r3, [pc, #404]	; (8001408 <fsm_traffic_modify+0x23c>)
 8001272:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001276:	601a      	str	r2, [r3, #0]
			time_red = 0;
 8001278:	4b66      	ldr	r3, [pc, #408]	; (8001414 <fsm_traffic_modify+0x248>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
		break;
 800127e:	e0b5      	b.n	80013ec <fsm_traffic_modify+0x220>
		if (timerLed_flag == 1) {
 8001280:	4b62      	ldr	r3, [pc, #392]	; (800140c <fsm_traffic_modify+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <fsm_traffic_modify+0xca>
			setTimerLed(500);
 8001288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128c:	f7ff fd7a 	bl	8000d84 <setTimerLed>
			traffic_blink(RED);
 8001290:	2064      	movs	r0, #100	; 0x64
 8001292:	f7ff ff63 	bl	800115c <traffic_blink>
		if (is_button3_pressed()) {
 8001296:	f7ff f851 	bl	800033c <is_button3_pressed>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a7 	beq.w	80013f0 <fsm_traffic_modify+0x224>
			status = RED_MODE;
 80012a2:	4b59      	ldr	r3, [pc, #356]	; (8001408 <fsm_traffic_modify+0x23c>)
 80012a4:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80012a8:	601a      	str	r2, [r3, #0]
		break;
 80012aa:	e0a1      	b.n	80013f0 <fsm_traffic_modify+0x224>
		if (timerLed_flag == 1) {
 80012ac:	4b57      	ldr	r3, [pc, #348]	; (800140c <fsm_traffic_modify+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d106      	bne.n	80012c2 <fsm_traffic_modify+0xf6>
			setTimerLed(500);
 80012b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b8:	f7ff fd64 	bl	8000d84 <setTimerLed>
			traffic_blink(YELLOW);
 80012bc:	2066      	movs	r0, #102	; 0x66
 80012be:	f7ff ff4d 	bl	800115c <traffic_blink>
		if (is_button1_pressed()) {
 80012c2:	f7ff f817 	bl	80002f4 <is_button1_pressed>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <fsm_traffic_modify+0x112>
			clearLight();
 80012cc:	f7ff fc6e 	bl	8000bac <clearLight>
			status = GREEN_MODE;
 80012d0:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <fsm_traffic_modify+0x23c>)
 80012d2:	f240 72d2 	movw	r2, #2002	; 0x7d2
 80012d6:	601a      	str	r2, [r3, #0]
			time_modify = 0;
 80012d8:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <fsm_traffic_modify+0x244>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
		if (is_button2_pressed()) {
 80012de:	f7ff f81b 	bl	8000318 <is_button2_pressed>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 8085 	beq.w	80013f4 <fsm_traffic_modify+0x228>
			status = YELLOW_MODIFY;
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <fsm_traffic_modify+0x23c>)
 80012ec:	f640 32ba 	movw	r2, #3002	; 0xbba
 80012f0:	601a      	str	r2, [r3, #0]
			time_yellow = 0;
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <fsm_traffic_modify+0x24c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
		break;
 80012f8:	e07c      	b.n	80013f4 <fsm_traffic_modify+0x228>
		if (timerLed_flag == 1) {
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <fsm_traffic_modify+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <fsm_traffic_modify+0x144>
			setTimerLed(500);
 8001302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001306:	f7ff fd3d 	bl	8000d84 <setTimerLed>
			traffic_blink(YELLOW);
 800130a:	2066      	movs	r0, #102	; 0x66
 800130c:	f7ff ff26 	bl	800115c <traffic_blink>
		if (is_button3_pressed()) {
 8001310:	f7ff f814 	bl	800033c <is_button3_pressed>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d06e      	beq.n	80013f8 <fsm_traffic_modify+0x22c>
			status = YELLOW_MODE;
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <fsm_traffic_modify+0x23c>)
 800131c:	f240 72d3 	movw	r2, #2003	; 0x7d3
 8001320:	601a      	str	r2, [r3, #0]
		break;
 8001322:	e069      	b.n	80013f8 <fsm_traffic_modify+0x22c>
		if (timerLed_flag == 1) {
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <fsm_traffic_modify+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <fsm_traffic_modify+0x16e>
			setTimerLed(500);
 800132c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001330:	f7ff fd28 	bl	8000d84 <setTimerLed>
			traffic_blink(GREEN);
 8001334:	2065      	movs	r0, #101	; 0x65
 8001336:	f7ff ff11 	bl	800115c <traffic_blink>
		if (is_button1_pressed()) {
 800133a:	f7fe ffdb 	bl	80002f4 <is_button1_pressed>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d02f      	beq.n	80013a4 <fsm_traffic_modify+0x1d8>
			clearLight();
 8001344:	f7ff fc32 	bl	8000bac <clearLight>
			ledMode = AUTO_MODE;
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <fsm_traffic_modify+0x250>)
 800134a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800134e:	601a      	str	r2, [r3, #0]
			status = AUTO_MODE;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <fsm_traffic_modify+0x23c>)
 8001352:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001356:	601a      	str	r2, [r3, #0]
			status_1 = RED;
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <fsm_traffic_modify+0x254>)
 800135a:	2264      	movs	r2, #100	; 0x64
 800135c:	601a      	str	r2, [r3, #0]
			status_2 = GREEN;
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <fsm_traffic_modify+0x258>)
 8001360:	2265      	movs	r2, #101	; 0x65
 8001362:	601a      	str	r2, [r3, #0]
			setTimer0(time_red * 1000);
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <fsm_traffic_modify+0x248>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fcd3 	bl	8000d1c <setTimer0>
			setTimer1(time_green * 1000);
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <fsm_traffic_modify+0x25c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fce4 	bl	8000d50 <setTimer1>
			setTimerCountDown(10);
 8001388:	200a      	movs	r0, #10
 800138a:	f7ff fd2f 	bl	8000dec <setTimerCountDown>
			time1 = time_red;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <fsm_traffic_modify+0x248>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <fsm_traffic_modify+0x260>)
 8001394:	6013      	str	r3, [r2, #0]
			time2 = time_green;
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <fsm_traffic_modify+0x25c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a25      	ldr	r2, [pc, #148]	; (8001430 <fsm_traffic_modify+0x264>)
 800139c:	6013      	str	r3, [r2, #0]
			time_modify = 0;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <fsm_traffic_modify+0x244>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
		if (is_button2_pressed()) {
 80013a4:	f7fe ffb8 	bl	8000318 <is_button2_pressed>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d026      	beq.n	80013fc <fsm_traffic_modify+0x230>
			status = GREEN_MODIFY;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <fsm_traffic_modify+0x23c>)
 80013b0:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80013b4:	601a      	str	r2, [r3, #0]
			time_green = 0;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <fsm_traffic_modify+0x25c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
		break;
 80013bc:	e01e      	b.n	80013fc <fsm_traffic_modify+0x230>
		if (timerLed_flag == 1) {
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <fsm_traffic_modify+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d106      	bne.n	80013d4 <fsm_traffic_modify+0x208>
			setTimerLed(500);
 80013c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ca:	f7ff fcdb 	bl	8000d84 <setTimerLed>
			traffic_blink(GREEN);
 80013ce:	2065      	movs	r0, #101	; 0x65
 80013d0:	f7ff fec4 	bl	800115c <traffic_blink>
		if (is_button3_pressed()) {
 80013d4:	f7fe ffb2 	bl	800033c <is_button3_pressed>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <fsm_traffic_modify+0x234>
			status = GREEN_MODE;
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <fsm_traffic_modify+0x23c>)
 80013e0:	f240 72d2 	movw	r2, #2002	; 0x7d2
 80013e4:	601a      	str	r2, [r3, #0]
		break;
 80013e6:	e00b      	b.n	8001400 <fsm_traffic_modify+0x234>
		break;
 80013e8:	bf00      	nop
 80013ea:	e00a      	b.n	8001402 <fsm_traffic_modify+0x236>
		break;
 80013ec:	bf00      	nop
 80013ee:	e008      	b.n	8001402 <fsm_traffic_modify+0x236>
		break;
 80013f0:	bf00      	nop
 80013f2:	e006      	b.n	8001402 <fsm_traffic_modify+0x236>
		break;
 80013f4:	bf00      	nop
 80013f6:	e004      	b.n	8001402 <fsm_traffic_modify+0x236>
		break;
 80013f8:	bf00      	nop
 80013fa:	e002      	b.n	8001402 <fsm_traffic_modify+0x236>
		break;
 80013fc:	bf00      	nop
 80013fe:	e000      	b.n	8001402 <fsm_traffic_modify+0x236>
		break;
 8001400:	bf00      	nop
	}
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000003c 	.word	0x2000003c
 800140c:	200000b0 	.word	0x200000b0
 8001410:	2000009c 	.word	0x2000009c
 8001414:	20000058 	.word	0x20000058
 8001418:	20000060 	.word	0x20000060
 800141c:	20000040 	.word	0x20000040
 8001420:	20000044 	.word	0x20000044
 8001424:	20000048 	.word	0x20000048
 8001428:	2000005c 	.word	0x2000005c
 800142c:	20000064 	.word	0x20000064
 8001430:	20000068 	.word	0x20000068

08001434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800145a:	f7ff fc59 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f001 fb0d 	bl	8002a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7ff f901 	bl	8000668 <main>
  bx lr
 8001466:	4770      	bx	lr
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001470:	08002b14 	.word	0x08002b14
  ldr r2, =_sbss
 8001474:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001478:	20000114 	.word	0x20000114

0800147c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f923 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fbb0 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f93b 	bl	8001746 <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 f903 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000004c 	.word	0x2000004c
 8001504:	20000070 	.word	0x20000070
 8001508:	2000006c 	.word	0x2000006c

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_IncTick+0x20>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000070 	.word	0x20000070
 800152c:	20000110 	.word	0x20000110

08001530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000110 	.word	0x20000110

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4906      	ldr	r1, [pc, #24]	; (80015dc <__NVIC_EnableIRQ+0x34>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff90 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff2d 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff42 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff90 	bl	8001634 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5f 	bl	80015e0 <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff35 	bl	80015a8 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	e148      	b.n	8001a06 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001774:	2201      	movs	r2, #1
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8137 	bne.w	8001a00 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4aa3      	ldr	r2, [pc, #652]	; (8001a24 <HAL_GPIO_Init+0x2c4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d05e      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 800179c:	4aa1      	ldr	r2, [pc, #644]	; (8001a24 <HAL_GPIO_Init+0x2c4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d875      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017a2:	4aa1      	ldr	r2, [pc, #644]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d058      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017a8:	4a9f      	ldr	r2, [pc, #636]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d86f      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ae:	4a9f      	ldr	r2, [pc, #636]	; (8001a2c <HAL_GPIO_Init+0x2cc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d052      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017b4:	4a9d      	ldr	r2, [pc, #628]	; (8001a2c <HAL_GPIO_Init+0x2cc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d869      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ba:	4a9d      	ldr	r2, [pc, #628]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d04c      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017c0:	4a9b      	ldr	r2, [pc, #620]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d863      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017c6:	4a9b      	ldr	r2, [pc, #620]	; (8001a34 <HAL_GPIO_Init+0x2d4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d046      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017cc:	4a99      	ldr	r2, [pc, #612]	; (8001a34 <HAL_GPIO_Init+0x2d4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d85d      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d82a      	bhi.n	800182c <HAL_GPIO_Init+0xcc>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d859      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_GPIO_Init+0x80>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	08001835 	.word	0x08001835
 80017e8:	08001847 	.word	0x08001847
 80017ec:	08001889 	.word	0x08001889
 80017f0:	0800188f 	.word	0x0800188f
 80017f4:	0800188f 	.word	0x0800188f
 80017f8:	0800188f 	.word	0x0800188f
 80017fc:	0800188f 	.word	0x0800188f
 8001800:	0800188f 	.word	0x0800188f
 8001804:	0800188f 	.word	0x0800188f
 8001808:	0800188f 	.word	0x0800188f
 800180c:	0800188f 	.word	0x0800188f
 8001810:	0800188f 	.word	0x0800188f
 8001814:	0800188f 	.word	0x0800188f
 8001818:	0800188f 	.word	0x0800188f
 800181c:	0800188f 	.word	0x0800188f
 8001820:	0800188f 	.word	0x0800188f
 8001824:	0800183d 	.word	0x0800183d
 8001828:	08001851 	.word	0x08001851
 800182c:	4a82      	ldr	r2, [pc, #520]	; (8001a38 <HAL_GPIO_Init+0x2d8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001832:	e02c      	b.n	800188e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e029      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	3304      	adds	r3, #4
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e024      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	3308      	adds	r3, #8
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e01f      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	330c      	adds	r3, #12
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e01a      	b.n	8001890 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001862:	2304      	movs	r3, #4
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e013      	b.n	8001890 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	611a      	str	r2, [r3, #16]
          break;
 800187a:	e009      	b.n	8001890 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	615a      	str	r2, [r3, #20]
          break;
 8001886:	e003      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x130>
          break;
 800188e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d801      	bhi.n	800189a <HAL_GPIO_Init+0x13a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e001      	b.n	800189e <HAL_GPIO_Init+0x13e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3304      	adds	r3, #4
 800189e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d802      	bhi.n	80018ac <HAL_GPIO_Init+0x14c>
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x152>
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3b08      	subs	r3, #8
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	210f      	movs	r1, #15
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	431a      	orrs	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8090 	beq.w	8001a00 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e0:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_GPIO_Init+0x2dc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a55      	ldr	r2, [pc, #340]	; (8001a3c <HAL_GPIO_Init+0x2dc>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <HAL_GPIO_Init+0x2dc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <HAL_GPIO_Init+0x2e0>)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <HAL_GPIO_Init+0x2e4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00d      	beq.n	8001940 <HAL_GPIO_Init+0x1e0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a48      	ldr	r2, [pc, #288]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d007      	beq.n	800193c <HAL_GPIO_Init+0x1dc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <HAL_GPIO_Init+0x2ec>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_GPIO_Init+0x1d8>
 8001934:	2302      	movs	r3, #2
 8001936:	e004      	b.n	8001942 <HAL_GPIO_Init+0x1e2>
 8001938:	2303      	movs	r3, #3
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x1e2>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_GPIO_Init+0x1e2>
 8001940:	2300      	movs	r3, #0
 8001942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001944:	f002 0203 	and.w	r2, r2, #3
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	4093      	lsls	r3, r2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001952:	493b      	ldr	r1, [pc, #236]	; (8001a40 <HAL_GPIO_Init+0x2e0>)
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4937      	ldr	r1, [pc, #220]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800197a:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	4933      	ldr	r1, [pc, #204]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001984:	4013      	ands	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	492d      	ldr	r1, [pc, #180]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4929      	ldr	r1, [pc, #164]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4923      	ldr	r1, [pc, #140]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	491f      	ldr	r1, [pc, #124]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	4919      	ldr	r1, [pc, #100]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60cb      	str	r3, [r1, #12]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4915      	ldr	r1, [pc, #84]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	3301      	adds	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f aeaf 	bne.w	8001774 <HAL_GPIO_Init+0x14>
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	372c      	adds	r7, #44	; 0x2c
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	10320000 	.word	0x10320000
 8001a28:	10310000 	.word	0x10310000
 8001a2c:	10220000 	.word	0x10220000
 8001a30:	10210000 	.word	0x10210000
 8001a34:	10120000 	.word	0x10120000
 8001a38:	10110000 	.word	0x10110000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40010800 	.word	0x40010800
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a92:	787b      	ldrb	r3, [r7, #1]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a98:	887a      	ldrh	r2, [r7, #2]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a9e:	e003      	b.n	8001aa8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac4:	887a      	ldrh	r2, [r7, #2]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	041a      	lsls	r2, r3, #16
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	887b      	ldrh	r3, [r7, #2]
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e26c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8087 	beq.w	8001c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	4b92      	ldr	r3, [pc, #584]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d00c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b10:	4b8f      	ldr	r3, [pc, #572]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d112      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5e>
 8001b1c:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b28:	d10b      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2a:	4b89      	ldr	r3, [pc, #548]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x12c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d168      	bne.n	8001c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e246      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x76>
 8001b4c:	4b80      	ldr	r3, [pc, #512]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a7f      	ldr	r2, [pc, #508]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e02e      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7a      	ldr	r2, [pc, #488]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a77      	ldr	r2, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e01d      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xbc>
 8001b86:	4b72      	ldr	r3, [pc, #456]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a71      	ldr	r2, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b6f      	ldr	r3, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6e      	ldr	r2, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a67      	ldr	r2, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fcb6 	bl	8001530 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fcb2 	bl	8001530 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1fa      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xe4>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fca2 	bl	8001530 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fc9e 	bl	8001530 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1e6      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x10c>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d11c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x18c>
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d116      	bne.n	8001c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x176>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1ba      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4939      	ldr	r1, [pc, #228]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	e03a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c78:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fc57 	bl	8001530 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff fc53 	bl	8001530 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e19b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4927      	ldr	r1, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc36 	bl	8001530 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fc32 	bl	8001530 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e17a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03a      	beq.n	8001d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d019      	beq.n	8001d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7ff fc16 	bl	8001530 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff fc12 	bl	8001530 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e15a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f000 faa6 	bl	8002278 <RCC_Delay>
 8001d2c:	e01c      	b.n	8001d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_RCC_OscConfig+0x274>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fbfc 	bl	8001530 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3a:	e00f      	b.n	8001d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fbf8 	bl	8001530 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d908      	bls.n	8001d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e140      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	42420000 	.word	0x42420000
 8001d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b9e      	ldr	r3, [pc, #632]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e9      	bne.n	8001d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a6 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b97      	ldr	r3, [pc, #604]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b94      	ldr	r3, [pc, #592]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a93      	ldr	r2, [pc, #588]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	4b8e      	ldr	r3, [pc, #568]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d118      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dae:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a8a      	ldr	r2, [pc, #552]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fbb9 	bl	8001530 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff fbb5 	bl	8001530 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	; 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0fd      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	4b81      	ldr	r3, [pc, #516]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x312>
 8001de8:	4b7b      	ldr	r3, [pc, #492]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a7a      	ldr	r2, [pc, #488]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	e02d      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x334>
 8001dfe:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a75      	ldr	r2, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a72      	ldr	r2, [pc, #456]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	e01c      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_OscConfig+0x356>
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a6c      	ldr	r2, [pc, #432]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a69      	ldr	r2, [pc, #420]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	e00b      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a66      	ldr	r2, [pc, #408]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a63      	ldr	r2, [pc, #396]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d015      	beq.n	8001e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fb69 	bl	8001530 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fb65 	bl	8001530 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0ab      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ee      	beq.n	8001e62 <HAL_RCC_OscConfig+0x37e>
 8001e84:	e014      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fb53 	bl	8001530 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff fb4f 	bl	8001530 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e095      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ee      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8081 	beq.w	8001fce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d061      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d146      	bne.n	8001f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0x4fc>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fb23 	bl	8001530 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff fb1f 	bl	8001530 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e067      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d108      	bne.n	8001f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	492d      	ldr	r1, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a19      	ldr	r1, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	4927      	ldr	r1, [pc, #156]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_OscConfig+0x4fc>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff faf3 	bl	8001530 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff faef 	bl	8001530 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e037      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x46a>
 8001f6c:	e02f      	b.n	8001fce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_RCC_OscConfig+0x4fc>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fadc 	bl	8001530 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff fad8 	bl	8001530 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e020      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x498>
 8001f9a:	e018      	b.n	8001fce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e013      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42420060 	.word	0x42420060

08001fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0d0      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d910      	bls.n	8002028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4965      	ldr	r1, [pc, #404]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b8      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800204a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d040      	beq.n	8002104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d115      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07f      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e073      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06b      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4936      	ldr	r1, [pc, #216]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d4:	f7ff fa2c 	bl	8001530 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7ff fa28 	bl	8001530 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e053      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d210      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	4922      	ldr	r1, [pc, #136]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e032      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4916      	ldr	r1, [pc, #88]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002172:	f000 f821 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002176:	4602      	mov	r2, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1cc>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f98a 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08002afc 	.word	0x08002afc
 80021b0:	2000004c 	.word	0x2000004c
 80021b4:	2000006c 	.word	0x2000006c

080021b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b490      	push	{r4, r7}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021c0:	1d3c      	adds	r4, r7, #4
 80021c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021c8:	f240 2301 	movw	r3, #513	; 0x201
 80021cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d002      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x40>
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x46>
 80021f6:	e02d      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fa:	623b      	str	r3, [r7, #32]
      break;
 80021fc:	e02d      	b.n	800225a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220a:	4413      	add	r3, r2
 800220c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002210:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <HAL_RCC_GetSysClockFreq+0xb4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	0c5b      	lsrs	r3, r3, #17
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800222a:	4413      	add	r3, r2
 800222c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002230:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	fb02 f203 	mul.w	r2, r2, r3
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	e004      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	623b      	str	r3, [r7, #32]
      break;
 8002252:	e002      	b.n	800225a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225a:	6a3b      	ldr	r3, [r7, #32]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3728      	adds	r7, #40	; 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bc90      	pop	{r4, r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	08002aec 	.word	0x08002aec
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	003d0900 	.word	0x003d0900

08002278 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <RCC_Delay+0x34>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <RCC_Delay+0x38>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0a5b      	lsrs	r3, r3, #9
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002294:	bf00      	nop
  }
  while (Delay --);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1e5a      	subs	r2, r3, #1
 800229a:	60fa      	str	r2, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f9      	bne.n	8002294 <RCC_Delay+0x1c>
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	2000004c 	.word	0x2000004c
 80022b0:	10624dd3 	.word	0x10624dd3

080022b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e041      	b.n	800234a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fcc2 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f000 fa6a 	bl	80027cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d001      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e035      	b.n	80023d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_TIM_Base_Start_IT+0x90>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x4e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002396:	d004      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x4e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_TIM_Base_Start_IT+0x94>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d111      	bne.n	80023c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d010      	beq.n	80023d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c4:	e007      	b.n	80023d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	40000400 	.word	0x40000400

080023ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0202 	mvn.w	r2, #2
 8002418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f9b1 	bl	8002796 <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f9a4 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f9b3 	bl	80027a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0204 	mvn.w	r2, #4
 800246c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f987 	bl	8002796 <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f97a 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f989 	bl	80027a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0208 	mvn.w	r2, #8
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f95d 	bl	8002796 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f950 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f95f 	bl	80027a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b10      	cmp	r3, #16
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0210 	mvn.w	r2, #16
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2208      	movs	r2, #8
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f933 	bl	8002796 <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f926 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f935 	bl	80027a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0201 	mvn.w	r2, #1
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fa6a 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d10e      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d107      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa67 	bl	8002a6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8f9 	bl	80027ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d107      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0220 	mvn.w	r2, #32
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa32 	bl	8002a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_TIM_ConfigClockSource+0x18>
 8002610:	2302      	movs	r3, #2
 8002612:	e0b3      	b.n	800277c <HAL_TIM_ConfigClockSource+0x180>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800263a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264c:	d03e      	beq.n	80026cc <HAL_TIM_ConfigClockSource+0xd0>
 800264e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002652:	f200 8087 	bhi.w	8002764 <HAL_TIM_ConfigClockSource+0x168>
 8002656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265a:	f000 8085 	beq.w	8002768 <HAL_TIM_ConfigClockSource+0x16c>
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002662:	d87f      	bhi.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
 8002664:	2b70      	cmp	r3, #112	; 0x70
 8002666:	d01a      	beq.n	800269e <HAL_TIM_ConfigClockSource+0xa2>
 8002668:	2b70      	cmp	r3, #112	; 0x70
 800266a:	d87b      	bhi.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
 800266c:	2b60      	cmp	r3, #96	; 0x60
 800266e:	d050      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x116>
 8002670:	2b60      	cmp	r3, #96	; 0x60
 8002672:	d877      	bhi.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b50      	cmp	r3, #80	; 0x50
 8002676:	d03c      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0xf6>
 8002678:	2b50      	cmp	r3, #80	; 0x50
 800267a:	d873      	bhi.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d058      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x136>
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d86f      	bhi.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
 8002684:	2b30      	cmp	r3, #48	; 0x30
 8002686:	d064      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x156>
 8002688:	2b30      	cmp	r3, #48	; 0x30
 800268a:	d86b      	bhi.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
 800268c:	2b20      	cmp	r3, #32
 800268e:	d060      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x156>
 8002690:	2b20      	cmp	r3, #32
 8002692:	d867      	bhi.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05c      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x156>
 8002698:	2b10      	cmp	r3, #16
 800269a:	d05a      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800269c:	e062      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6899      	ldr	r1, [r3, #8]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f000 f95c 	bl	800296a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	609a      	str	r2, [r3, #8]
      break;
 80026ca:	e04e      	b.n	800276a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f000 f945 	bl	800296a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ee:	609a      	str	r2, [r3, #8]
      break;
 80026f0:	e03b      	b.n	800276a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	461a      	mov	r2, r3
 8002700:	f000 f8bc 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2150      	movs	r1, #80	; 0x50
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f913 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002710:	e02b      	b.n	800276a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	461a      	mov	r2, r3
 8002720:	f000 f8da 	bl	80028d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2160      	movs	r1, #96	; 0x60
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f903 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002730:	e01b      	b.n	800276a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	461a      	mov	r2, r3
 8002740:	f000 f89c 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2140      	movs	r1, #64	; 0x40
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f8f3 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002750:	e00b      	b.n	800276a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f000 f8ea 	bl	8002936 <TIM_ITRx_SetConfig>
        break;
 8002762:	e002      	b.n	800276a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002764:	bf00      	nop
 8002766:	e000      	b.n	800276a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002768:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a25      	ldr	r2, [pc, #148]	; (8002874 <TIM_Base_SetConfig+0xa8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <TIM_Base_SetConfig+0x28>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ea:	d003      	beq.n	80027f4 <TIM_Base_SetConfig+0x28>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a22      	ldr	r2, [pc, #136]	; (8002878 <TIM_Base_SetConfig+0xac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d108      	bne.n	8002806 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <TIM_Base_SetConfig+0xa8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <TIM_Base_SetConfig+0x52>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d003      	beq.n	800281e <TIM_Base_SetConfig+0x52>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <TIM_Base_SetConfig+0xac>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d108      	bne.n	8002830 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <TIM_Base_SetConfig+0xa8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d103      	bne.n	8002864 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	615a      	str	r2, [r3, #20]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400

0800287c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f023 0201 	bic.w	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 030a 	bic.w	r3, r3, #10
 80028b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 0210 	bic.w	r2, r3, #16
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002902:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	031b      	lsls	r3, r3, #12
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002914:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	621a      	str	r2, [r3, #32]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 0307 	orr.w	r3, r3, #7
 8002958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002984:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	021a      	lsls	r2, r3, #8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4313      	orrs	r3, r2
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	609a      	str	r2, [r3, #8]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029bc:	2302      	movs	r3, #2
 80029be:	e041      	b.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10c      	bne.n	8002a32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40000400 	.word	0x40000400

08002a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <__libc_init_array>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	2600      	movs	r6, #0
 8002a80:	4d0c      	ldr	r5, [pc, #48]	; (8002ab4 <__libc_init_array+0x38>)
 8002a82:	4c0d      	ldr	r4, [pc, #52]	; (8002ab8 <__libc_init_array+0x3c>)
 8002a84:	1b64      	subs	r4, r4, r5
 8002a86:	10a4      	asrs	r4, r4, #2
 8002a88:	42a6      	cmp	r6, r4
 8002a8a:	d109      	bne.n	8002aa0 <__libc_init_array+0x24>
 8002a8c:	f000 f822 	bl	8002ad4 <_init>
 8002a90:	2600      	movs	r6, #0
 8002a92:	4d0a      	ldr	r5, [pc, #40]	; (8002abc <__libc_init_array+0x40>)
 8002a94:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <__libc_init_array+0x44>)
 8002a96:	1b64      	subs	r4, r4, r5
 8002a98:	10a4      	asrs	r4, r4, #2
 8002a9a:	42a6      	cmp	r6, r4
 8002a9c:	d105      	bne.n	8002aaa <__libc_init_array+0x2e>
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa4:	4798      	blx	r3
 8002aa6:	3601      	adds	r6, #1
 8002aa8:	e7ee      	b.n	8002a88 <__libc_init_array+0xc>
 8002aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aae:	4798      	blx	r3
 8002ab0:	3601      	adds	r6, #1
 8002ab2:	e7f2      	b.n	8002a9a <__libc_init_array+0x1e>
 8002ab4:	08002b0c 	.word	0x08002b0c
 8002ab8:	08002b0c 	.word	0x08002b0c
 8002abc:	08002b0c 	.word	0x08002b0c
 8002ac0:	08002b10 	.word	0x08002b10

08002ac4 <memset>:
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4402      	add	r2, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <_init>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr

08002ae0 <_fini>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	bf00      	nop
 8002ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae6:	bc08      	pop	{r3}
 8002ae8:	469e      	mov	lr, r3
 8002aea:	4770      	bx	lr
